package com.microdb.microdb.controller;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.NestedExceptionUtils;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.microdb.microdb.bean.Respuesta;
import com.microdb.microdb.bean.User;
import com.microdb.microdb.repository.UserRepository;

import io.swagger.v3.oas.annotations.parameters.RequestBody;


@RestController// This means that this class is a Controller
@RequestMapping(path = "/user") // This means URL's start with /demo (after Application path)
public class UserController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    

    //@RequestParam(required = false) Parametro no requerido
    @PostMapping(path = "/add") // Map ONLY POST Requests
    @ExceptionHandler(DataIntegrityViolationException.class)
    public @ResponseBody Respuesta addNewUser(@RequestParam String name, @RequestParam String email, @RequestParam String documentNumber) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(name);
        n.setEmail(email);
        n.setDocumentNumber(documentNumber);
        Respuesta respuesta = new Respuesta();
        try {
            userRepository.save(n);
            respuesta.setRespuesta("Usuario Guardado");
        } catch (DataIntegrityViolationException   e) {
            respuesta.setRespuesta("Usuario no fue guardado");
            respuesta.setError(NestedExceptionUtils.getMostSpecificCause(e).getMessage());
        }

        return respuesta;

    }

    @PostMapping(value = "/add2", consumes =  {MediaType.APPLICATION_JSON_VALUE}, produces =  {MediaType.APPLICATION_JSON_VALUE})
    public @ResponseBody User addNewUser2(@RequestBody User user) {
        User n = new User();
        n.setName(user.getName());
        n.setEmail(user.getEmail());
        n.setDocumentNumber(user.getDocumentNumber());
        return userRepository.save(n);

    }

    @GetMapping(value = "/find", consumes =  MediaType.APPLICATION_JSON_VALUE, produces =  MediaType.APPLICATION_JSON_VALUE)
    public @ResponseBody Optional<User> getUser(@RequestBody User user) {
        return userRepository.findById(user.getId());

    }

    @GetMapping(path = "/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
}