package com.microdb.microdb.controller;


import java.sql.SQLException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.microdb.microdb.repository.UserRepository;
import com.microdb.microdb.bean.Respuesta;
import com.microdb.microdb.bean.User;


@Controller // This means that this class is a Controller
@RequestMapping(path = "/user") // This means URL's start with /demo (after Application path)
public class MainController {
    
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    
    @PostMapping(path = "/add") // Map ONLY POST Requests
    public @ResponseBody Respuesta addNewUser(@RequestParam String name, @RequestParam String email, @RequestParam String documentNumber, @RequestParam(required = false) String cellPhoneNumber) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(name);
        n.setEmail(email);
        n.setDocumentNumber(documentNumber);
        if(cellPhoneNumber != null && !cellPhoneNumber.isEmpty()){
            n.setCellPhoneNumber(cellPhoneNumber);
        }

        Respuesta respuesta = new Respuesta();
        try {
            userRepository.save(n);
            respuesta.setRespuesta("Usuario Guardado");
        } catch (Exception e) {
            respuesta.setRespuesta("Error al guardar el usuario");
            respuesta.setError(e.getMessage());
        }
        return respuesta;

    }

    @GetMapping(path = "/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
}